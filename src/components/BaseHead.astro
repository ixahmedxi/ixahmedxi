---
import { siteConfig } from '../siteConfig';

import '../styles/global.css';

type Props = {
  title?: string;
  description?: string;
  image?: string;
};

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title = siteConfig.title,
  description = siteConfig.description,
  image = '/og.webp',
} = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<link rel="icon" href="/favicon.ico" type="image/x-icon" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<script is:inline>
  const STORAGE_KEY = 'theme';
  const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
  const themeToggleLightIcon = document.getElementById(
    'theme-toggle-light-icon',
  );
  const themeToggleBtn = document.getElementById('theme-toggle');
  const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)');

  function toggleTheme(activeTheme) {
    localStorage.setItem(STORAGE_KEY, activeTheme);

    const isDarkMode = activeTheme === 'dark';

    document.documentElement.classList.toggle('dark', isDarkMode);
    document.documentElement.classList.toggle('light', !isDarkMode);

    themeToggleDarkIcon?.classList.toggle('hidden', isDarkMode);
    themeToggleLightIcon?.classList.toggle('hidden', !isDarkMode);
  }

  if (
    localStorage.getItem(STORAGE_KEY) === 'dark' ||
    (!localStorage[STORAGE_KEY] && prefersDarkMode.matches)
  ) {
    themeToggleLightIcon?.classList.add('hidden');
  } else {
    themeToggleDarkIcon?.classList.add('hidden');
  }

  themeToggleBtn?.addEventListener('click', function () {
    const activeTheme =
      localStorage.getItem(STORAGE_KEY) === 'dark' ? 'light' : 'dark';

    toggleTheme(activeTheme);
  });

  toggleTheme(
    localStorage.getItem(STORAGE_KEY) ??
      (prefersDarkMode.matches ? 'dark' : 'light'),
  );

  const theme = (() => {
    if (
      typeof localStorage !== 'undefined' &&
      localStorage.getItem(STORAGE_KEY)
    ) {
      return localStorage.getItem(STORAGE_KEY);
    }

    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }

    return 'light';
  })();

  window.localStorage.setItem(STORAGE_KEY, theme);

  document.addEventListener('astro:after-swap', function () {
    if (localStorage.getItem(STORAGE_KEY) === 'dark')
      document.documentElement.classList.toggle('dark', true);
  });
</script>
